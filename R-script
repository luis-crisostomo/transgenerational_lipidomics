#check package requirements
##CRAN
list.of.packages <- c('dplyr', 'curl', 'vegan', 'mixOmics', 'igraph')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, ask = F, dependencies = T)

##Bioconda
if (!requireNamespace('BiocManager', quietly = TRUE))
    install.packages('BiocManager')
BiocManager::install()
BiocManager::install('mixOmics')

#import metabolomics and lipidomics files
library(curl)
lipids <- read.csv(curl("https://raw.githubusercontent.com/luis-crisostomo/transgenerational_lipidomics/main/Lipidomics.csv"), header=TRUE, row.names=1)
metabolites <- read.csv(curl("https://raw.githubusercontent.com/luis-crisostomo/transgenerational_lipidomics/main/Metabolomics.csv"), header=TRUE, row.names=1)

#structure data for PLS-DA
lipids_f0 <- subset(lipids, generation == 'F0', 5:19) #select lipidomics F0
lipids_f0[] <- lapply(lipids_f0, as.numeric) #change column type to numeric (essential for operations)

metabolites_f0 <- subset(metabolites, generation == 'F0', 5:28) #select metabolites F0
metabolites_f0[] <- lapply(metabolites_f0, as.numeric)

lip_met <- c("Glycerol","Choline","Acetate","Phosphocholine","Ethanolamine","Phosphoethanolamine","myo.Inositol","triOHbut") #vector for metabolite selector
metlip_f0 <- metabolites_f0[lip_met] #dataframe with metabolites selected/assigned as lipid precursors

design_f0 <- subset(lipids, generation == 'F0', c('sample', 'group')) #sample info
f0_factors <- as.factor(design_f0$group) #phenotype selectors for PLS-DA (exp. groups) 

#remove missing values and adapt factors
purge_f0 <- c("c14_0","c16_0","c16_1n7","c18_0","c18_1n9","c18_1n7","c18_2n6","c20_3n6","c20_4n6","c22_5n6","c22_6n3") #drop columns without data
cleanlipids_f0 <- na.omit(lipids_f0[purge_f0]) #remove rows with missing values
cleanfactor_f0 <- as.factor(rep(c("CTRL","HFD","HFDt"), times = c(5,3,5))) #remaining samples
clean.metlip_f0 <- metlip_f0[!(rownames(metlip_f0) %in% c("F0_HFD1","F0_HFD3","F0_HFD6")),] #equalize row number in the other dimension for 2-omics
clean.metabolites_f0 <- metabolites_f0[!(rownames(metabolites_f0) %in% c("F0_HFD1","F0_HFD3","F0_HFD6")), !(colnames(metabolites_f0) %in% lip_met)]
labels_f0 <- c("CTRL1","CTRL2","CTRL3","CTRL4","CTRL5","HFD2","HFD4","HFD5","HFDt1","HFDt2","HFDt3","HFDt4","HFDt5")

#tables purged from missing values ready for processing
cleanlipids_f0
clean.metlip_f0
clean.metabolites_f0
cleanfactor_f0
labels_f0

#run PLS-DA and sPLS-DA
library('mixOmics') 
library('igraph')

##obtain variable factors by PLS-DA (2 components) and write the output in .csv
result.plsda <- plsda(cleanlipids_f0, cleanfactor_f0, ncomp = 2)
write.table(result.plsda[["loadings"]][["X"]], "sPLS-DA Gen0 - X.csv", sep=";", col.names = NA) 

#run sPLS-DA with 
result.splsda <- splsda(cleanlipids_f0, cleanfactor_f0, ncomp = 2, keepX = c(10, 5))
plotIndiv(result.splsda, ind.names = FALSE, legend=TRUE, ellipse = TRUE, title="sPLS-DA - Generation F0")

background <- background.predict(result.splsda, comp.predicted=2, dist = "centroids.dist") 
plotIndiv(result.splsda, comp = 1:2, group = cleanfactor_f0, ind.names = FALSE, title = "Generation F0: sPLS-DA", legend = TRUE, centroid = TRUE, col.per.group = c("dodgerblue","red3","darkgreen"), pch = c(15:17),  background = background)

#figure sPLS-DA lipidomics with background (save as svg 600x600)
plotIndiv(result.splsda, comp = 1:2, group = cleanfactor_f0, ind.names = labels_f0, title = "Generation F0: sPLS-DA", legend = FALSE, centroid = TRUE, col.per.group = c("dodgerblue","red3","darkgreen"), abline = TRUE, background = background)

#two-omics PLS/sPLS
result.2omics.pls <- pls(cleanlipids_f0, clean.metlip_f0) #method
plotIndiv(result.2omics.pls)
plotVar(result.2omics.pls)

result.2omics.pls[["loadings"]][["Y"]] #see loading values for block Y (metabolites)
plotLoadings(result.2omics.pls, comp = 1) #plot loading variable per comp (this is an unsupervised method)
plotLoadings(result.2omics.pls, comp = 2)
write.table(result.2omics.pls[["loadings"]][["X"]], "sPLS Gen0 - Lipids.txt", sep="\t") #write results in txt (for supplemental data)
write.table(result.2omics.pls[["loadings"]][["Y"]], "sPLS Gen0 - Lipid_precursors.txt", sep="\t")

result.2omics.spls <- spls(cleanlipids_f0, clean.metlip_f0, ncomp = 2, keepX = c(9, 5), keepY = c(5,6)) #method, with variables load > [0.2]
#save as Gen F0 - 2Omics sPLS.svg (600x600)
plotIndiv(result.2omics.spls, group = cleanfactor_f0, col.per.group = c("dodgerblue","red3","darkgreen"), rep.space = "XY-variate", centroid = TRUE, ellipse = TRUE, abline = TRUE, size.xlabel = 12, size.ylabel = 12, ind.names = labels_f0,  xlim = c(-5,5), ylim = c(-5,5), title = 'Generation F0: 2-omics sPLS')

#correlations 2omics
X11()
cim(result.2omics.spls, comp = 1)
X11()
cim(result.2omics.spls, comp = 2)
X11()
cim(result.2omics.spls, comp = c(1,2))

#network graphs sPLS 2Omics
network(result.2omics.spls, comp = c(1,2), color.node = c('orchid', 'brown'), 
row.names = c(" C14:0 "," C16:0 ", "C16:1n7", " C18:0 ", "C18:1n9", "C18:1n7", "C18:2n6", "C20:3n6", "C20:4n6", "C22:5n6", "C22:6n3"), 
col.names = c("Glycerol","Choline","Acetate","P-Choline","EtNH2","P-EtNH2","m-Inositol","3OH-But"), 
cex.node.name = 10, lty.edge = c("solid", "dashed"), lwd.edge = c(2,2), cutoff = 0.4, interactive = TRUE) #interactive buble chart (optimize cutoff)

# network(result.2omics.spls, comp = c(1,2), color.node = c('orchid', 'brown'), 
# row.names = c(" C14:0 "," C16:0 ", "C16:1n7", " C18:0 ", "C18:1n9", "C18:1n7", "C18:2n6", "C20:3n6", "C20:4n6", "C22:5n6", "C22:6n3"), 
# col.names = c("Glycerol","Choline","Acetate","P-Choline","EtNH2","P-EtNH2","m-Inositol","3OH-But"), 
# cex.node.name = 10, lty.edge = c("solid", "dashed"), lwd.edge = c(2,2), cutoff = 0.5, save = 'tiff', name.save = 'Gen F0 - 2Omics sPLSnetwork') #bubble chart (2 comps)

net.result <- network(result.2omics.spls) #in case of error, increase plot area
write.graph(net.result$gR, file = "network.gml", format = "gml") #save network for cytescape

#use PERMANOVA to find p-values for sPLS-DA and two-omics sPLS (vegan package)
library(vegan) #load vegan package
result.permanova.splsda <- adonis2(result.splsda[["variates"]][["X"]] ~ cleanfactor_f0, data = as.data.frame(result.splsda[["variates"]][["X"]]), method = "euclidean", by = "terms", permutations = 999, parallel = getOption("mc.cores")) #PERMANOVA for sPLS-DA
#result.mrpp.splsda <- mrpp(as.data.frame(result.splsda[["variates"]][["X"]]), cleanfactor_f0, permutations = 999, distance = "euclidean")

average.dist_f0 <- (result.2omics.spls[["variates"]][["X"]]+result.2omics.spls[["variates"]][["Y"]])/2 #calculate XY-variate 
result.permanova.2omicsspls <- adonis2(average.dist_f0 ~ cleanfactor_f0, data = as.data.frame(average.dist_f0), method = "euclidean", by = "terms", permutations = 999, parallel = getOption("mc.cores")) #PERMANOVA for two-omics sPLS
#result.mrpp.2omicsspls <- mrpp(as.data.frame(average.dist_f0), cleanfactor_f0, permutations = 999, distance = "euclidean")
