#import metabolomics and lipidomics files
lipids = read.csv2("Lipidomics.csv", header=TRUE, row.names=1)
metabolites = read.csv2("Metabolomics.csv", header=TRUE, row.names=1)

if (!require('mixOmics',)) install.packages('mixOmics')
library(package)

#structure data for PLS-DA
library("mixOmics") #load mixOmics package
library("igraph") #mixOmics does not load it automatically

lipids_f0 <- subset(lipids, generation == 'F0', 5:19) #select lipidomics F0
lipids_f0[] <- lapply(lipids_f0, as.numeric) #change column type to numeric (essential for operations)

metabolites_f0 <- subset(metabolites, generation == 'F0', 5:28) #select metabolites F0
metabolites_f0[] <- lapply(metabolites_f0, as.numeric)

lip_met <- c("Glycerol","Choline","Acetate","Phosphocholine","Ethanolamine","Phosphoethanolamine","myo.Inositol","triOHbut") #vector for metabolite selector
metlip_f0 <- metabolites_f0[lip_met] #dataframe with metabolites selected/assigned as lipid precursors

design_f0 <- subset(lipids, generation == 'F0', c('sample', 'group')) #sample info
f0_factors <- as.factor(design_f0$group) #phenotype selectors for PLS-DA (exp. groups) 

#remove missing values and adapt factors
purge_f0 <- c("c14_0","c16_0","c16_1n7","c18_0","c18_1n9","c18_1n7","c18_2n6","c20_3n6","c20_4n6","c22_5n6","c22_6n3") #drop columns without data
cleanlipids_f0 <- na.omit(lipids_f0[purge_f0]) #remove rows with missing values
cleanfactor_f0 <- as.factor(rep(c("CTRL","HFD","HFDt"), times = c(5,3,5))) #remaining samples
clean.metlip_f0 <- metlip_f0[!(rownames(metlip_f0) %in% c("F0_HFD1","F0_HFD3","F0_HFD6")),] #equalize row number in the other dimension for 2-omics
clean.metabolites_f0 <- metabolites_f0[!(rownames(metabolites_f0) %in% c("F0_HFD1","F0_HFD3","F0_HFD6")), !(colnames(metabolites_f0) %in% lip_met)]
labels_f0 <- c("CTRL1","CTRL2","CTRL3","CTRL4","CTRL5","HFD2","HFD4","HFD5","HFDt1","HFDt2","HFDt3","HFDt4","HFDt5")

#tables purged from missing values ready for processing
cleanlipids_f0
clean.metlip_f0
clean.metabolites_f0
cleanfactor_f0
labels_f0

#run PLS-DA or sPLS-DA
result.plsda <- plsda(cleanlipids_f0, cleanfactor_f0, ncomp = 2)
plotIndiv(result.plsda, ind.names = FALSE, legend=TRUE, ellipse = TRUE, title="PLS-DA - Generation F0")

selectVar(result.plsda, comp=1)$value #Selected variables on component 1
selectVar(result.plsda, comp=2)$value #Selected variables on component 2
plotLoadings(result.plsda, contrib = 'max', method = 'mean', comp = 1) #plot loadings per component and which group is more affected by it
write.table(result.plsda[["loadings"]][["X"]], "sPLS-DA Gen0 - X.txt", sep="\t") #write variable loadings in .txt
write.table(result.plsda[["loadings"]][["Y"]], "sPLS-DA Gen0 - Y.txt", sep="\t") #write group loadings in .txt


#tweaking the analysis for proper sPLS-DA
result.plsda2 <- plsda(cleanlipids_f0, cleanfactor_f0, ncomp = 2)
#perf.plsda <- perf(result.plsda2, validation = "Mfold", folds = 3, progressBar = FALSE, nrepeat = 50) #you must have more than 3 comps for this validation
res.perf <- perf(result.plsda2, validation = "loo", progressBar = TRUE) #another kind of validation
plot(res.perf, col = color.mixo(5:7), sd = TRUE, legend.position = "horizontal")

#the number of samples does not allow proper simulation to evaluate how many variables should be kept in each component (for sPLS-DA). However, the loading plots can be really informative in this regard!
#test if selecting variables with more than [0.2] loading are more discriminant
result.splsda <- splsda(cleanlipids_f0, cleanfactor_f0, ncomp = 2, keepX = c(10, 5)) #parameter keepX must be optimized
plotIndiv(result.splsda, ind.names = FALSE, legend=TRUE, ellipse = TRUE, title="sPLS-DA - Generation F0")

background <- background.predict(result.splsda, comp.predicted=2, dist = "centroids.dist") 
plotIndiv(result.splsda, comp = 1:2, group = cleanfactor_f0, ind.names = FALSE, title = "Generation F0: sPLS-DA", legend = TRUE, centroid = TRUE, col.per.group = c("dodgerblue","red3","darkgreen"), pch = c(15:17),  background = background)

#figure sPLS-DA lipidomics with background (save as svg 600x600)
plotIndiv(result.splsda, comp = 1:2, group = cleanfactor_f0, ind.names = labels_f0, title = "Generation F0: sPLS-DA", legend = FALSE, centroid = TRUE, col.per.group = c("dodgerblue","red3","darkgreen"), abline = TRUE, background = background)

#two-omics PLS/sPLS
result.2omics.pls <- pls(cleanlipids_f0, clean.metlip_f0) #method
plotIndiv(result.2omics.pls)
plotVar(result.2omics.pls)

result.2omics.pls[["loadings"]][["Y"]] #see loading values for block Y (metabolites)
plotLoadings(result.2omics.pls, comp = 1) #plot loading variable per comp (this is an unsupervised method)
plotLoadings(result.2omics.pls, comp = 2)
write.table(result.2omics.pls[["loadings"]][["X"]], "sPLS Gen0 - Lipids.txt", sep="\t") #write results in txt (for supplemental data)
write.table(result.2omics.pls[["loadings"]][["Y"]], "sPLS Gen0 - Lipid_precursors.txt", sep="\t")

result.2omics.spls <- spls(cleanlipids_f0, clean.metlip_f0, ncomp = 2, keepX = c(9, 5), keepY = c(5,6)) #method, with variables load > [0.2]
#save as Gen F0 - 2Omics sPLS.svg (600x600)
plotIndiv(result.2omics.spls, group = cleanfactor_f0, col.per.group = c("dodgerblue","red3","darkgreen"), rep.space = "XY-variate", centroid = TRUE, ellipse = TRUE, abline = TRUE, size.xlabel = 12, size.ylabel = 12, ind.names = labels_f0,  xlim = c(-5,5), ylim = c(-5,5), title = 'Generation F0: 2-omics sPLS')

#correlations 2omics
X11()
cim(result.2omics.spls, comp = 1)
X11()
cim(result.2omics.spls, comp = 2)
X11()
cim(result.2omics.spls, comp = c(1,2))

#network graphs sPLS 2Omics
network(result.2omics.spls, comp = c(1,2), color.node = c('orchid', 'brown'), 
row.names = c(" C14:0 "," C16:0 ", "C16:1n7", " C18:0 ", "C18:1n9", "C18:1n7", "C18:2n6", "C20:3n6", "C20:4n6", "C22:5n6", "C22:6n3"), 
col.names = c("Glycerol","Choline","Acetate","P-Choline","EtNH2","P-EtNH2","m-Inositol","3OH-But"), 
cex.node.name = 10, lty.edge = c("solid", "dashed"), lwd.edge = c(2,2), cutoff = 0.4, interactive = TRUE) #interactive buble chart (optimize cutoff)

# network(result.2omics.spls, comp = c(1,2), color.node = c('orchid', 'brown'), 
# row.names = c(" C14:0 "," C16:0 ", "C16:1n7", " C18:0 ", "C18:1n9", "C18:1n7", "C18:2n6", "C20:3n6", "C20:4n6", "C22:5n6", "C22:6n3"), 
# col.names = c("Glycerol","Choline","Acetate","P-Choline","EtNH2","P-EtNH2","m-Inositol","3OH-But"), 
# cex.node.name = 10, lty.edge = c("solid", "dashed"), lwd.edge = c(2,2), cutoff = 0.5, save = 'tiff', name.save = 'Gen F0 - 2Omics sPLSnetwork') #bubble chart (2 comps)

net.result <- network(result.2omics.spls) #in case of error, increase plot area
write.graph(net.result$gR, file = "network.gml", format = "gml") #save network for cytescape

#block.plsda or #block.splsda (requires revision)
rownames(cleanlipids_f0) <- rownames(clean.metlip_f0) #to make sure the rows are the same
X = list(Lipidomics = cleanlipids_f0, Lipid_precursors = clean.metlip_f0, Metabolomics = clean.metabolites_f0)
results.block.plsda <- block.plsda(X, cleanfactor_f0)
write.table(results.block.plsda[["loadings"]][["Lipidomics"]], "mydata.txt", sep="\t")
write.table(results.block.plsda[["loadings"]][["Lipid_precursors"]], "mydata.txt", sep="\t")
write.table(results.block.plsda[["loadings"]][["Metabolomics"]], "mydata.txt", sep="\t")

list.keepX <- list(Lipidomics = c(9, 5), Lipid_precursors = c(5,6), Metabolomics = c(9, 8))
results.diablo <- block.splsda(X, cleanfactor_f0, ncomp = 2, keepX = list.keepX)

plotIndiv(results.diablo, col.per.group = c("dodgerblue","red3","darkgreen"), pch = c(15:17), ellipse = TRUE, centroid = TRUE, ind.names = FALSE, legend=TRUE, title = 'Generation F0: DIABLO analysis') #block plot
plotVar(results.diablo) ## variable plot
X11()
plotDiablo(results.diablo, ncomp = 1) #DIABLO mosaic - component 1
X11()
circosPlot(results.diablo, line = TRUE, cutoff=0.7) #circus plot
network(results.diablo, blocks = c(1,2,3), color.node = c('orchid', 'brown','green'), cutoff = 0.5, save = 'tiff', name.save = 'Gen F0 - DIABLO network') #bubble chart
#network(results.diablo, comp = list(Lipidomics = 1:2, Lipid_precursors = 1:2, Metabolomics = 1:2), blocks = c(1,2,3), color.node = c('orchid', 'brown','green'), cex.node.name = 12, lty.edge = c("solid", "dashed"), lwd.edge = c(3,3), cutoff = 0.5, interactive = TRUE) #interactive buble chart (optimize cutoff)
#network(results.diablo, comp = list(Lipidomics = 1:2, Lipid_precursors = 1:2, Metabolomics = 1:2), blocks = c(1,2,3), color.node = c('orchid', 'brown','green'), cex.node.name = 12, lty.edge = c("solid", "dashed"), lwd.edge = c(3,3), cutoff = 0.7, save = 'tiff', name.save = 'Gen F0 - DIABLO network2')
X11()
cimDiablo(results.diablo, color.blocks = c('orchid', 'brown', 'green'), comp = 1, margins = c(5, 18), legend.position = "right", size.legend = 0.8)

#to control figure resolution and size
tiff("Gen F0 - DIABLO circus.tiff", units="in", width=6, height=6, res=600)
circosPlot(results.diablo, line = TRUE, cutoff=0.7) #the plot to control
dev.off()
#another tweak
tiff("Gen F0 - DIABLO CIM.tiff", units="in", width=10, height=6, res=300)
cimDiablo(results.diablo, color.blocks = c('orchid', 'brown', 'green'), comp = 1, margins = c(5, 18), legend.position = "right", size.legend = 0.8) #the plot to control
dev.off()

#use PERMANOVA to find p-values for sPLS-DA and two-omics sPLS (vegan package)
library(vegan) #load vegan package
result.permanova.splsda <- adonis2(result.splsda[["variates"]][["X"]] ~ cleanfactor_f0, data = as.data.frame(result.splsda[["variates"]][["X"]]), method = "euclidean", by = "terms", permutations = 999, parallel = getOption("mc.cores")) #PERMANOVA for sPLS-DA
#result.mrpp.splsda <- mrpp(as.data.frame(result.splsda[["variates"]][["X"]]), cleanfactor_f0, permutations = 999, distance = "euclidean")

average.dist_f0 <- (result.2omics.spls[["variates"]][["X"]]+result.2omics.spls[["variates"]][["Y"]])/2 #calculate XY-variate 
result.permanova.2omicsspls <- adonis2(average.dist_f0 ~ cleanfactor_f0, data = as.data.frame(average.dist_f0), method = "euclidean", by = "terms", permutations = 999, parallel = getOption("mc.cores")) #PERMANOVA for two-omics sPLS
#result.mrpp.2omicsspls <- mrpp(as.data.frame(average.dist_f0), cleanfactor_f0, permutations = 999, distance = "euclidean")

#block.splsda
# -------------
data("breast.TCGA")
# this is the X data as a list of mRNA, miRNA and proteins
data = list(mrna = breast.TCGA$data.train$mrna, mirna = breast.TCGA$data.train$mirna,
protein = breast.TCGA$data.train$protein)
# set up a full design where every block is connected
design = matrix(1, ncol = length(data), nrow = length(data),
dimnames = list(names(data), names(data)))
diag(design) =  0
design
# set number of component per data set
ncomp = c(2)
# set number of variables to select, per component and per data set (this is set arbitrarily)
list.keepX = list(mrna = rep(20, 2), mirna = rep(10,2), protein = rep(10, 2))


TCGA.block.splsda = block.splsda(X = data, Y = breast.TCGA$data.train$subtype,
ncomp = ncomp, keepX = list.keepX, design = design)
TCGA.block.splsda

plotIndiv(TCGA.block.splsda, ind.names = FALSE)
# illustrates coefficient weights in each block
plotLoadings(TCGA.block.splsda, ncomp = 1, contrib = 'max')
plotVar(TCGA.block.splsda, style = 'graphics', legend = TRUE)
